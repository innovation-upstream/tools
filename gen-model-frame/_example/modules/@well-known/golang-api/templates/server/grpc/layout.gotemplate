package rpc

{{- $golangAPIModuleOptions := index .Basic.Options.module "@well-known/golang-api" -}}

{{- $pkgPath := $golangAPIModuleOptions.golang.packagePath -}}

import (
  "context"

  "cloud.google.com/go/firestore"
  "cloud.google.com/go/firestore"
  "github.com/bugsnag/bugsnag-go"
  "github.com/golang/protobuf/ptypes/empty"
  "{{$pkgPath}}/internal/logic"
  "{{$pkgPath}}/pb"
  "{{$pkgPath}}/pb/transform"
  "go.opentelemetry.io/otel/api/trace"
  "unknwon.dev/clog/v2"
  hook "{{ $golangAPIModuleOptions.golang.hookPackagePath }}"
)

type server struct {
  tracer      trace.Tracer
  logicFactory  logic.{{.Basic.ModCamel}}LogicFactory
  repoFactory repo.{{.Basic.ModCamel}}RepoFactory
  db *firestore.Client
}

func New(
  t trace.Tracer,
  lgcFac logic.{{.Basic.ModCamel}}LogicFactory,
  repoFac repo.{{.Basic.ModCamel}}RepoFactory,
  db *firestore.Client,
) pb.{{.Basic.ModCamel}}RPCServer {
  return &server{
    tracer:      t,
    logicFactory:  lgcFac,
    repoFactory: repoFac,
    db: db,
  }
}

func (s *server) GetLogic(
  ctx context.Context,
) (logic.{{.Basic.ModCamel}}Logic, func(), error) {
  r := s.repoFactory.Create{{.Basic.ModCamel}}Repo(s.db)
  h, cleanup, err = hook.{{ index .Basic.Hooks "Constructor" }}(ctx, d)
  if err != nil {
    return nil, nil, errors.WithStack(err)
  }

  lgc := s.logicFactory.Create{{.Basic.ModCamel}}Logic(r, s.ac, h)

  return lgc, func() {
    cleanup()
  }, nil
}

{{.Sections.method}}
