// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.innovationup.stream/innovation-upstream/tools/gen-model-frame/internal/module/registry (interfaces: ModuleRegistry)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	registry "gitlab.innovationup.stream/innovation-upstream/tools/gen-model-frame/internal/module/registry"
	reflect "reflect"
)

// MockModuleRegistry is a mock of ModuleRegistry interface
type MockModuleRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockModuleRegistryMockRecorder
}

// MockModuleRegistryMockRecorder is the mock recorder for MockModuleRegistry
type MockModuleRegistryMockRecorder struct {
	mock *MockModuleRegistry
}

// NewMockModuleRegistry creates a new mock instance
func NewMockModuleRegistry(ctrl *gomock.Controller) *MockModuleRegistry {
	mock := &MockModuleRegistry{ctrl: ctrl}
	mock.recorder = &MockModuleRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModuleRegistry) EXPECT() *MockModuleRegistryMockRecorder {
	return m.recorder
}

// QueryAllModuleHeaders mocks base method
func (m *MockModuleRegistry) QueryAllModuleHeaders() ([]registry.ModuleHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllModuleHeaders")
	ret0, _ := ret[0].([]registry.ModuleHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllModuleHeaders indicates an expected call of QueryAllModuleHeaders
func (mr *MockModuleRegistryMockRecorder) QueryAllModuleHeaders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllModuleHeaders", reflect.TypeOf((*MockModuleRegistry)(nil).QueryAllModuleHeaders))
}
