// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.innovationup.stream/innovation-upstream/tools/gen-model-frame/internal/module (interfaces: ModuleLoader)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	module "gitlab.innovationup.stream/innovation-upstream/tools/gen-model-frame/internal/module"
	reflect "reflect"
)

// MockModuleLoader is a mock of ModuleLoader interface
type MockModuleLoader struct {
	ctrl     *gomock.Controller
	recorder *MockModuleLoaderMockRecorder
}

// MockModuleLoaderMockRecorder is the mock recorder for MockModuleLoader
type MockModuleLoaderMockRecorder struct {
	mock *MockModuleLoader
}

// NewMockModuleLoader creates a new mock instance
func NewMockModuleLoader(ctrl *gomock.Controller) *MockModuleLoader {
	mock := &MockModuleLoader{ctrl: ctrl}
	mock.recorder = &MockModuleLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModuleLoader) EXPECT() *MockModuleLoaderMockRecorder {
	return m.recorder
}

// LoadAllModulesFromDirectory mocks base method
func (m *MockModuleLoader) LoadAllModulesFromDirectory(arg0 string) ([]*module.ModelFrameModule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAllModulesFromDirectory", arg0)
	ret0, _ := ret[0].([]*module.ModelFrameModule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAllModulesFromDirectory indicates an expected call of LoadAllModulesFromDirectory
func (mr *MockModuleLoaderMockRecorder) LoadAllModulesFromDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAllModulesFromDirectory", reflect.TypeOf((*MockModuleLoader)(nil).LoadAllModulesFromDirectory), arg0)
}

// LoadLayerLayoutTemplate mocks base method
func (m *MockModuleLoader) LoadLayerLayoutTemplate(arg0 string, arg1 module.ModelFrameLayerLabel) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadLayerLayoutTemplate", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadLayerLayoutTemplate indicates an expected call of LoadLayerLayoutTemplate
func (mr *MockModuleLoaderMockRecorder) LoadLayerLayoutTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadLayerLayoutTemplate", reflect.TypeOf((*MockModuleLoader)(nil).LoadLayerLayoutTemplate), arg0, arg1)
}

// LoadSectionTemplate mocks base method
func (m *MockModuleLoader) LoadSectionTemplate(arg0 string, arg1 module.ModelFunctionLabel, arg2 module.ModelFrameLayerLabel, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSectionTemplate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadSectionTemplate indicates an expected call of LoadSectionTemplate
func (mr *MockModuleLoaderMockRecorder) LoadSectionTemplate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSectionTemplate", reflect.TypeOf((*MockModuleLoader)(nil).LoadSectionTemplate), arg0, arg1, arg2, arg3)
}
